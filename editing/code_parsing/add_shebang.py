#!/usr/bin/env python
"""Module for add_shebang."""

from argparse import Namespace
from contextlib import AbstractContextManager
import os
from os.path import basename
import shutil
import stat
from tempfile import NamedTemporaryFile
from types import TracebackType

from file_handlers.file_data import FileData, Interpretor
from file_handlers.file_tracker import FileTracker


class ValidationError(ValueError):
    """Value validation error."""
    pass


class Escape(AbstractContextManager):
    """Context manager wrapper for 'breaking' out of context managers."""

    class Break(Exception):
        """Break out of the with statement."""
        pass

    def __init__(self, context: AbstractContextManager):
        """Initialise with the context manager."""
        self.context = context

    def __enter__(self):
        """Enter with wrapped context manager."""
        return self.context.__enter__()

    def __exit__(
        self, exc_type: type[BaseException] | None,
        exc_value: BaseException | None,
        traceback: TracebackType | None
    ) -> bool | None:
        """Break out or exit with wrapped context manager."""
        if exc_type == self.Break:
            return True

        return self.context.__exit__(exc_type, exc_value, traceback)


def process_add_shebang_args(args: Namespace) -> None:
    """Parse command line arguments for add_shebang."""
    if args.files:
        tracker: FileTracker = FileTracker(args.files)
        for file in tracker.files.values():
            add_shebang(file, args.shebang)


def add_shebang(file_data: FileData, shebang: str | None = None) -> None:
    """Add a shebang to a file and execute permissions to a file.

    Args:
        file_data: a FileData object with filename set.
        shebang: a unix style shebang to be added to the file. If None,
            a shebang will be generated by inferring interpretor from the
            file's extension.
    """
    if not isinstance(file_data, FileData):
        raise TypeError("file_data must be an instance of FileData")

    if shebang is not None:
        shebang = check_shebang(shebang)

    try:
        with (
            open(file_data.filepath, "r", encoding="utf-8") as file,
            NamedTemporaryFile(
                "wb", prefix=f"{basename(file.name)}.", delete=False,
            ) as tmpf,
        ):
            line1: str = file.readline()
            if line1.startswith("#!/"):
                raise Escape.Break

            file.seek(0)
            if shebang is None:
                shebang = generate_shebang(file_data.file_interpretor)

            tmpf.write(
                bytes(f"{shebang}{file.read()}", encoding="utf-8"))
            tmpf.flush()

        shutil.copystat(file.name, tmpf.file.name)
    except Exception as err:
        if os.path.exists(tmpf.file.name):
            os.remove(tmpf.file.name)

        if not isinstance(err, Escape.Break):
            raise err

    if os.path.exists(tmpf.file.name):
        os.chmod(
            tmpf.file.name, os.stat(tmpf.file.name).st_mode | stat.S_IXUSR
        )
        shutil.move(tmpf.file.name, file.name)
    else:
        os.chmod(file.name, os.stat(file.name).st_mode | stat.S_IXUSR)


def check_shebang(shebang: str) -> str:
    """Validate shebang syntax."""
    if not isinstance(shebang, str):
        raise TypeError("shebang must be a string")

    shebang = "".join([shebang.strip(), "\n"])
    if not shebang.startswith("#!/"):
        raise ValidationError(
            "shebang must be a valid unix shebang."
            r"For example: '#!/usr/bin/env python\n'"
        )

    return shebang


def generate_shebang(interpretor: Interpretor | None) -> str:
    """Create a shebang string for file."""
    if interpretor is None:
        raise ValidationError(
            "Could not determine the file's interpretor.")

    if not isinstance(interpretor, Interpretor):
        raise TypeError(f"interpretor must be an instance of {Interpretor}.")

    return f"#!/usr/bin/env {interpretor.name.lower()}\n"


if __name__ == "__main__":
    add_shebang(FileData("test.py"))
